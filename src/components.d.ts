/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';


import {
  EventEmitter,
} from '@stencil/core';
import {
  PickedFile,
} from './components/filepicker/pickedfile';


export namespace Components {

  interface EvbButtonBar {
    'justify': 'left' | 'center' | 'right';
  }
  interface EvbButtonBarAttributes extends StencilHTMLAttributes {
    'justify'?: 'left' | 'center' | 'right';
  }

  interface EvbButton {
    /**
    * Whether or not the button is disabled
    */
    'disabled': boolean;
    /**
    * Invert the coloring of the button
    */
    'ghost': boolean;
    /**
    * The target of the anchor tag
    */
    'href'?: string;
    /**
    * Extra rounded colors
    */
    'pill': boolean;
    /**
    * The type of the button, leave empty in case of a link
    */
    'type'?: 'submit' | 'button' | 'reset';
  }
  interface EvbButtonAttributes extends StencilHTMLAttributes {
    /**
    * Whether or not the button is disabled
    */
    'disabled'?: boolean;
    /**
    * Invert the coloring of the button
    */
    'ghost'?: boolean;
    /**
    * The target of the anchor tag
    */
    'href'?: string;
    /**
    * Blur event
    */
    'onEvbBlur'?: (event: CustomEvent<void>) => void;
    /**
    * Focus event
    */
    'onEvbFocus'?: (event: CustomEvent<void>) => void;
    /**
    * Extra rounded colors
    */
    'pill'?: boolean;
    /**
    * The type of the button, leave empty in case of a link
    */
    'type'?: 'submit' | 'button' | 'reset';
  }

  interface EvbFilepicker {
    /**
    * A string that defines the file types the file input should accept. This string is a comma-separated list of unique file type specifiers. To accept images, video and audio, use: accept="audio/*,video/*,image/*" otherwise provide the correct mimetype, eg: image/png for png images etc
    */
    'accept': string;
    /**
    * Should we show the input type=file?
    */
    'input': boolean;
    /**
    * indicates that the user may choose more than one file
    */
    'multiple': boolean;
  }
  interface EvbFilepickerAttributes extends StencilHTMLAttributes {
    /**
    * A string that defines the file types the file input should accept. This string is a comma-separated list of unique file type specifiers. To accept images, video and audio, use: accept="audio/*,video/*,image/*" otherwise provide the correct mimetype, eg: image/png for png images etc
    */
    'accept'?: string;
    /**
    * Should we show the input type=file?
    */
    'input'?: boolean;
    /**
    * indicates that the user may choose more than one file
    */
    'multiple'?: boolean;
    /**
    * Emits the dataurl for the image
    */
    'onPick'?: (event: CustomEvent<PickedFile>) => void;
  }

  interface EvbRange {
    'max': number;
    'min': number;
    'step': number;
    'value': number;
  }
  interface EvbRangeAttributes extends StencilHTMLAttributes {
    'max'?: number;
    'min'?: number;
    'onEvbBlur'?: (event: CustomEvent<void>) => void;
    'onEvbChange'?: (event: CustomEvent<number>) => void;
    'onEvbFocus'?: (event: CustomEvent<void>) => void;
    'onEvbInput'?: (event: CustomEvent<number>) => void;
    'step'?: number;
    'value'?: number;
  }

  interface EvbFormcontrol {
    'name': string;
  }
  interface EvbFormcontrolAttributes extends StencilHTMLAttributes {
    'name'?: string;
  }

  interface EvbHeader {
    'heading': number | string;
  }
  interface EvbHeaderAttributes extends StencilHTMLAttributes {
    'heading': number | string;
  }

  interface EvbProgressbar {
    /**
    * The height of the bar in pixels
    */
    'height': number;
    /**
    * Progress percentage
    */
    'progress': number;
    /**
    * Show the progress as text in the progress bar
    */
    'text': boolean;
  }
  interface EvbProgressbarAttributes extends StencilHTMLAttributes {
    /**
    * The height of the bar in pixels
    */
    'height'?: number;
    'onCompleted'?: (event: CustomEvent<void>) => void;
    /**
    * Progress percentage
    */
    'progress'?: number;
    /**
    * Show the progress as text in the progress bar
    */
    'text'?: boolean;
  }

  interface EvbCollection {
    'heading': string;
  }
  interface EvbCollectionAttributes extends StencilHTMLAttributes {
    'heading'?: string;
  }
}

declare global {
  interface StencilElementInterfaces {
    'EvbButtonBar': Components.EvbButtonBar;
    'EvbButton': Components.EvbButton;
    'EvbFilepicker': Components.EvbFilepicker;
    'EvbRange': Components.EvbRange;
    'EvbFormcontrol': Components.EvbFormcontrol;
    'EvbHeader': Components.EvbHeader;
    'EvbProgressbar': Components.EvbProgressbar;
    'EvbCollection': Components.EvbCollection;
  }

  interface StencilIntrinsicElements {
    'evb-button-bar': Components.EvbButtonBarAttributes;
    'evb-button': Components.EvbButtonAttributes;
    'evb-filepicker': Components.EvbFilepickerAttributes;
    'evb-range': Components.EvbRangeAttributes;
    'evb-formcontrol': Components.EvbFormcontrolAttributes;
    'evb-header': Components.EvbHeaderAttributes;
    'evb-progressbar': Components.EvbProgressbarAttributes;
    'evb-collection': Components.EvbCollectionAttributes;
  }


  interface HTMLEvbButtonBarElement extends Components.EvbButtonBar, HTMLStencilElement {}
  var HTMLEvbButtonBarElement: {
    prototype: HTMLEvbButtonBarElement;
    new (): HTMLEvbButtonBarElement;
  };

  interface HTMLEvbButtonElement extends Components.EvbButton, HTMLStencilElement {}
  var HTMLEvbButtonElement: {
    prototype: HTMLEvbButtonElement;
    new (): HTMLEvbButtonElement;
  };

  interface HTMLEvbFilepickerElement extends Components.EvbFilepicker, HTMLStencilElement {}
  var HTMLEvbFilepickerElement: {
    prototype: HTMLEvbFilepickerElement;
    new (): HTMLEvbFilepickerElement;
  };

  interface HTMLEvbRangeElement extends Components.EvbRange, HTMLStencilElement {}
  var HTMLEvbRangeElement: {
    prototype: HTMLEvbRangeElement;
    new (): HTMLEvbRangeElement;
  };

  interface HTMLEvbFormcontrolElement extends Components.EvbFormcontrol, HTMLStencilElement {}
  var HTMLEvbFormcontrolElement: {
    prototype: HTMLEvbFormcontrolElement;
    new (): HTMLEvbFormcontrolElement;
  };

  interface HTMLEvbHeaderElement extends Components.EvbHeader, HTMLStencilElement {}
  var HTMLEvbHeaderElement: {
    prototype: HTMLEvbHeaderElement;
    new (): HTMLEvbHeaderElement;
  };

  interface HTMLEvbProgressbarElement extends Components.EvbProgressbar, HTMLStencilElement {}
  var HTMLEvbProgressbarElement: {
    prototype: HTMLEvbProgressbarElement;
    new (): HTMLEvbProgressbarElement;
  };

  interface HTMLEvbCollectionElement extends Components.EvbCollection, HTMLStencilElement {}
  var HTMLEvbCollectionElement: {
    prototype: HTMLEvbCollectionElement;
    new (): HTMLEvbCollectionElement;
  };

  interface HTMLElementTagNameMap {
    'evb-button-bar': HTMLEvbButtonBarElement
    'evb-button': HTMLEvbButtonElement
    'evb-filepicker': HTMLEvbFilepickerElement
    'evb-range': HTMLEvbRangeElement
    'evb-formcontrol': HTMLEvbFormcontrolElement
    'evb-header': HTMLEvbHeaderElement
    'evb-progressbar': HTMLEvbProgressbarElement
    'evb-collection': HTMLEvbCollectionElement
  }

  interface ElementTagNameMap {
    'evb-button-bar': HTMLEvbButtonBarElement;
    'evb-button': HTMLEvbButtonElement;
    'evb-filepicker': HTMLEvbFilepickerElement;
    'evb-range': HTMLEvbRangeElement;
    'evb-formcontrol': HTMLEvbFormcontrolElement;
    'evb-header': HTMLEvbHeaderElement;
    'evb-progressbar': HTMLEvbProgressbarElement;
    'evb-collection': HTMLEvbCollectionElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
