/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';


import {
  EventEmitter,
} from '@stencil/core';
import {
  PickedFile,
} from './components/file-picker/pickedfile';


export namespace Components {

  interface EvbButtonBar {
    'align': 'top' | 'center' | 'bottom';
    /**
    * Justify the contents of the buttonbar
    */
    'justify': 'left' | 'center' | 'right';
  }
  interface EvbButtonBarAttributes extends StencilHTMLAttributes {
    'align'?: 'top' | 'center' | 'bottom';
    /**
    * Justify the contents of the buttonbar
    */
    'justify'?: 'left' | 'center' | 'right';
  }

  interface EvbButton {
    /**
    * Whether or not the button is disabled
    */
    'disabled': boolean;
    /**
    * Invert the coloring of the button
    */
    'ghost': boolean;
    /**
    * The target of the anchor tag
    */
    'href'?: string;
    /**
    * Extra rounded colors
    */
    'pill': boolean;
    /**
    * The type of the button, leave empty in case of a link
    */
    'type'?: 'submit' | 'button' | 'reset';
  }
  interface EvbButtonAttributes extends StencilHTMLAttributes {
    /**
    * Whether or not the button is disabled
    */
    'disabled'?: boolean;
    /**
    * Invert the coloring of the button
    */
    'ghost'?: boolean;
    /**
    * The target of the anchor tag
    */
    'href'?: string;
    /**
    * Blur event
    */
    'onEvbBlur'?: (event: CustomEvent<void>) => void;
    /**
    * Focus event
    */
    'onEvbFocus'?: (event: CustomEvent<void>) => void;
    /**
    * Extra rounded colors
    */
    'pill'?: boolean;
    /**
    * The type of the button, leave empty in case of a link
    */
    'type'?: 'submit' | 'button' | 'reset';
  }

  interface EvbDonut {
    'diameter': number;
    'invert': boolean;
    'progress': number;
    'text': boolean;
    'thickness': number;
  }
  interface EvbDonutAttributes extends StencilHTMLAttributes {
    'diameter'?: number;
    'invert'?: boolean;
    'progress'?: number;
    'text'?: boolean;
    'thickness'?: number;
  }

  interface EvbExpansionPanel {
    /**
    * Where to align the title
    */
    'justify'?: 'left' | 'right' | 'center';
    /**
    * Whether the panel is open, eg: shows it's content
    */
    'open': boolean;
    /**
    * The textual title of the panel
    */
    'text': string;
  }
  interface EvbExpansionPanelAttributes extends StencilHTMLAttributes {
    /**
    * Where to align the title
    */
    'justify'?: 'left' | 'right' | 'center';
    /**
    * Emits when the panel is closed
    */
    'onClosed'?: (event: CustomEvent<void>) => void;
    /**
    * Emits when the panel is opened
    */
    'onOpened'?: (event: CustomEvent<void>) => void;
    /**
    * Whether the panel is open, eg: shows it's content
    */
    'open'?: boolean;
    /**
    * The textual title of the panel
    */
    'text'?: string;
  }

  interface EvbDropzone {
    /**
    * A string that defines the file types the file input should accept. This string is a comma-separated list of unique file type specifiers. To accept images, video and audio, use: accept="audio/*,video/*,image/*" otherwise provide the correct mimetype, eg: image/png for png images etc
    */
    'accept': string;
  }
  interface EvbDropzoneAttributes extends StencilHTMLAttributes {
    /**
    * A string that defines the file types the file input should accept. This string is a comma-separated list of unique file type specifiers. To accept images, video and audio, use: accept="audio/*,video/*,image/*" otherwise provide the correct mimetype, eg: image/png for png images etc
    */
    'accept'?: string;
    /**
    * Fired after a file has been pickedÂ§
    */
    'onDropped'?: (event: CustomEvent<PickedFile>) => void;
  }

  interface EvbFilepicker {
    /**
    * A string that defines the file types the file input should accept. This string is a comma-separated list of unique file type specifiers. To accept images, video and audio, use: accept="audio/*,video/*,image/*" otherwise provide the correct mimetype, eg: image/png for png images etc
    */
    'accept': string;
    'handleFiles': (files: FileList) => void;
    /**
    * Should we show the input type=file?
    */
    'input': boolean;
    /**
    * indicates that the user may choose more than one file
    */
    'multiple': boolean;
  }
  interface EvbFilepickerAttributes extends StencilHTMLAttributes {
    /**
    * A string that defines the file types the file input should accept. This string is a comma-separated list of unique file type specifiers. To accept images, video and audio, use: accept="audio/*,video/*,image/*" otherwise provide the correct mimetype, eg: image/png for png images etc
    */
    'accept'?: string;
    /**
    * Should we show the input type=file?
    */
    'input'?: boolean;
    /**
    * indicates that the user may choose more than one file
    */
    'multiple'?: boolean;
    /**
    * Emits the dataurl for the image
    */
    'onPick'?: (event: CustomEvent<PickedFile>) => void;
  }

  interface EvbFilepreview {
    'alt': string;
    'caption'?: string;
    /**
    * The source (data) url of the image to preview
    */
    'src': string;
  }
  interface EvbFilepreviewAttributes extends StencilHTMLAttributes {
    'alt'?: string;
    'caption'?: string;
    /**
    * The source (data) url of the image to preview
    */
    'src'?: string;
  }

  interface EvbFlyout {
    'header': string;
    'open': boolean;
    'toggle': (forceOpen?: boolean) => void;
  }
  interface EvbFlyoutAttributes extends StencilHTMLAttributes {
    'header'?: string;
    'onClose'?: (event: CustomEvent<void>) => void;
    'onOpen'?: (event: CustomEvent<void>) => void;
    'open'?: boolean;
  }

  interface EvbFormcontrol {}
  interface EvbFormcontrolAttributes extends StencilHTMLAttributes {}

  interface EvbRange {
    'max': number;
    'min': number;
    'step': number;
    'value': number;
  }
  interface EvbRangeAttributes extends StencilHTMLAttributes {
    'max'?: number;
    'min'?: number;
    'onEvbBlur'?: (event: CustomEvent<void>) => void;
    'onEvbChange'?: (event: CustomEvent<number>) => void;
    'onEvbFocus'?: (event: CustomEvent<void>) => void;
    'onEvbInput'?: (event: CustomEvent<number>) => void;
    'step'?: number;
    'value'?: number;
  }

  interface EvbToggle {
    'labeloff': string;
    'labelon': string;
    'type': 'default' | 'flat' | 'rotate';
    'value': boolean;
  }
  interface EvbToggleAttributes extends StencilHTMLAttributes {
    'labeloff'?: string;
    'labelon'?: string;
    'onEvbBlur'?: (event: CustomEvent<void>) => void;
    'onEvbChange'?: (event: CustomEvent<boolean>) => void;
    'onEvbFocus'?: (event: CustomEvent<void>) => void;
    'onEvbInput'?: (event: CustomEvent<boolean>) => void;
    'type'?: 'default' | 'flat' | 'rotate';
    'value'?: boolean;
  }

  interface EvbHeader {
    'heading': number | string;
  }
  interface EvbHeaderAttributes extends StencilHTMLAttributes {
    'heading': number | string;
  }

  interface EvbProgressbar {
    /**
    * The height of the bar in pixels
    */
    'height': number;
    /**
    * Progress percentage
    */
    'progress': number;
    /**
    * Show the progress as text in the progress bar
    */
    'text': boolean;
  }
  interface EvbProgressbarAttributes extends StencilHTMLAttributes {
    /**
    * The height of the bar in pixels
    */
    'height'?: number;
    'onCompleted'?: (event: CustomEvent<void>) => void;
    /**
    * Progress percentage
    */
    'progress'?: number;
    /**
    * Show the progress as text in the progress bar
    */
    'text'?: boolean;
  }
}

declare global {
  interface StencilElementInterfaces {
    'EvbButtonBar': Components.EvbButtonBar;
    'EvbButton': Components.EvbButton;
    'EvbDonut': Components.EvbDonut;
    'EvbExpansionPanel': Components.EvbExpansionPanel;
    'EvbDropzone': Components.EvbDropzone;
    'EvbFilepicker': Components.EvbFilepicker;
    'EvbFilepreview': Components.EvbFilepreview;
    'EvbFlyout': Components.EvbFlyout;
    'EvbFormcontrol': Components.EvbFormcontrol;
    'EvbRange': Components.EvbRange;
    'EvbToggle': Components.EvbToggle;
    'EvbHeader': Components.EvbHeader;
    'EvbProgressbar': Components.EvbProgressbar;
  }

  interface StencilIntrinsicElements {
    'evb-button-bar': Components.EvbButtonBarAttributes;
    'evb-button': Components.EvbButtonAttributes;
    'evb-donut': Components.EvbDonutAttributes;
    'evb-expansion-panel': Components.EvbExpansionPanelAttributes;
    'evb-dropzone': Components.EvbDropzoneAttributes;
    'evb-filepicker': Components.EvbFilepickerAttributes;
    'evb-filepreview': Components.EvbFilepreviewAttributes;
    'evb-flyout': Components.EvbFlyoutAttributes;
    'evb-formcontrol': Components.EvbFormcontrolAttributes;
    'evb-range': Components.EvbRangeAttributes;
    'evb-toggle': Components.EvbToggleAttributes;
    'evb-header': Components.EvbHeaderAttributes;
    'evb-progressbar': Components.EvbProgressbarAttributes;
  }


  interface HTMLEvbButtonBarElement extends Components.EvbButtonBar, HTMLStencilElement {}
  var HTMLEvbButtonBarElement: {
    prototype: HTMLEvbButtonBarElement;
    new (): HTMLEvbButtonBarElement;
  };

  interface HTMLEvbButtonElement extends Components.EvbButton, HTMLStencilElement {}
  var HTMLEvbButtonElement: {
    prototype: HTMLEvbButtonElement;
    new (): HTMLEvbButtonElement;
  };

  interface HTMLEvbDonutElement extends Components.EvbDonut, HTMLStencilElement {}
  var HTMLEvbDonutElement: {
    prototype: HTMLEvbDonutElement;
    new (): HTMLEvbDonutElement;
  };

  interface HTMLEvbExpansionPanelElement extends Components.EvbExpansionPanel, HTMLStencilElement {}
  var HTMLEvbExpansionPanelElement: {
    prototype: HTMLEvbExpansionPanelElement;
    new (): HTMLEvbExpansionPanelElement;
  };

  interface HTMLEvbDropzoneElement extends Components.EvbDropzone, HTMLStencilElement {}
  var HTMLEvbDropzoneElement: {
    prototype: HTMLEvbDropzoneElement;
    new (): HTMLEvbDropzoneElement;
  };

  interface HTMLEvbFilepickerElement extends Components.EvbFilepicker, HTMLStencilElement {}
  var HTMLEvbFilepickerElement: {
    prototype: HTMLEvbFilepickerElement;
    new (): HTMLEvbFilepickerElement;
  };

  interface HTMLEvbFilepreviewElement extends Components.EvbFilepreview, HTMLStencilElement {}
  var HTMLEvbFilepreviewElement: {
    prototype: HTMLEvbFilepreviewElement;
    new (): HTMLEvbFilepreviewElement;
  };

  interface HTMLEvbFlyoutElement extends Components.EvbFlyout, HTMLStencilElement {}
  var HTMLEvbFlyoutElement: {
    prototype: HTMLEvbFlyoutElement;
    new (): HTMLEvbFlyoutElement;
  };

  interface HTMLEvbFormcontrolElement extends Components.EvbFormcontrol, HTMLStencilElement {}
  var HTMLEvbFormcontrolElement: {
    prototype: HTMLEvbFormcontrolElement;
    new (): HTMLEvbFormcontrolElement;
  };

  interface HTMLEvbRangeElement extends Components.EvbRange, HTMLStencilElement {}
  var HTMLEvbRangeElement: {
    prototype: HTMLEvbRangeElement;
    new (): HTMLEvbRangeElement;
  };

  interface HTMLEvbToggleElement extends Components.EvbToggle, HTMLStencilElement {}
  var HTMLEvbToggleElement: {
    prototype: HTMLEvbToggleElement;
    new (): HTMLEvbToggleElement;
  };

  interface HTMLEvbHeaderElement extends Components.EvbHeader, HTMLStencilElement {}
  var HTMLEvbHeaderElement: {
    prototype: HTMLEvbHeaderElement;
    new (): HTMLEvbHeaderElement;
  };

  interface HTMLEvbProgressbarElement extends Components.EvbProgressbar, HTMLStencilElement {}
  var HTMLEvbProgressbarElement: {
    prototype: HTMLEvbProgressbarElement;
    new (): HTMLEvbProgressbarElement;
  };

  interface HTMLElementTagNameMap {
    'evb-button-bar': HTMLEvbButtonBarElement
    'evb-button': HTMLEvbButtonElement
    'evb-donut': HTMLEvbDonutElement
    'evb-expansion-panel': HTMLEvbExpansionPanelElement
    'evb-dropzone': HTMLEvbDropzoneElement
    'evb-filepicker': HTMLEvbFilepickerElement
    'evb-filepreview': HTMLEvbFilepreviewElement
    'evb-flyout': HTMLEvbFlyoutElement
    'evb-formcontrol': HTMLEvbFormcontrolElement
    'evb-range': HTMLEvbRangeElement
    'evb-toggle': HTMLEvbToggleElement
    'evb-header': HTMLEvbHeaderElement
    'evb-progressbar': HTMLEvbProgressbarElement
  }

  interface ElementTagNameMap {
    'evb-button-bar': HTMLEvbButtonBarElement;
    'evb-button': HTMLEvbButtonElement;
    'evb-donut': HTMLEvbDonutElement;
    'evb-expansion-panel': HTMLEvbExpansionPanelElement;
    'evb-dropzone': HTMLEvbDropzoneElement;
    'evb-filepicker': HTMLEvbFilepickerElement;
    'evb-filepreview': HTMLEvbFilepreviewElement;
    'evb-flyout': HTMLEvbFlyoutElement;
    'evb-formcontrol': HTMLEvbFormcontrolElement;
    'evb-range': HTMLEvbRangeElement;
    'evb-toggle': HTMLEvbToggleElement;
    'evb-header': HTMLEvbHeaderElement;
    'evb-progressbar': HTMLEvbProgressbarElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
